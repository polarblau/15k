{"version":3,"sources":["components/SearchForm/index.js","components/TravelModeSelect/index.js","components/Map/index.js","components/Marker/index.js","components/Circle/index.js","components/Isoline/index.js","components/CountyInfo/index.js","App.js","reportWebVitals.js","index.js"],"names":["SearchForm","props","useState","error","setError","address","setAddress","Paper","elevation","className","onSubmit","evt","preventDefault","platform","getSearchService","geocode","q","data","result","items","coords","position","title","county","postalCode","onResult","args","console","TextField","fullWidth","label","variant","value","onChange","target","Alert","severity","TravelModeSelect","travelMode","setTravelMode","ToggleButtonGroup","exclusive","ToggleButton","Map","mapRef","useRef","map","setMap","setPlatform","useLayoutEffect","current","hPlatform","H","service","Platform","defaultLayers","createDefaultLayers","hMap","vector","normal","pixelRatio","window","devicePixelRatio","center","zoom","mapevents","Behavior","MapEvents","dispose","useEffect","onResize","getViewPort","resize","onTap","screenToGeo","currentPointer","viewportX","viewportY","onClick","addEventListener","removeEventListener","setCenter","zoomBounds","getViewModel","setLookAtData","bounds","setZoom","ref","children","React","Children","c","cloneElement","renderChildren","Marker","marker","addObject","removeObject","Circle","style","fillColor","strokeColor","lineDash","lineWidth","circle","radius","onBoundsChange","getBoundingBox","Isoline","polyline","setPolyline","getRoutingService","params","start","lat","lng","range","rangetype","rangeType","mode","fetch","obj","str","key","encodeURIComponent","objToParams","apikey","a","then","response","json","latLngArray","isoline","component","shape","e","split","flat","geo","LineString","fromLatLngArray","polygon","Polygon","CountyInfo","setData","countyInfo","setCountyInfo","rawData","entries","features","count","attributes","GEN","name","cases7_per_100k","status","updatedAt","last_update","Object","fromEntries","prepData","DEFAULT_COORDS","App","setCoords","setCounty","setZoomBounds","navigator","geolocation","getCurrentPosition","latitude","longitude","coordsToHERECoords","coordsSet","is","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29187ae1.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Paper, TextField } from '@material-ui/core'\nimport Alert from '@material-ui/lab/Alert'\n\n// import H from \"@here/maps-api-for-javascript\"\n\n\n\nconst SearchForm = (props) => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [address, setAddress] = useState('')\n  // props.onError\n  // props.onGeoCode\n  // props.coords ?\n  // props.address\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault()\n    const service = props.platform.getSearchService()\n    service.geocode({ q: address }, \n      (data) => {\n        \n        const result = data.items[0]\n        if (!result) {\n          setError('Nothing found for this input.')\n          return\n        }\n        const coords = result.position\n        const address = result.title\n        const {county, postalCode} = result.address\n        props.onResult({ coords, county, postalCode })\n        setAddress(address)\n      }, \n      (...args) => {\n        console.error('GEOCODING ERROR!', args)\n        setError('Something went wrong. Please try again.')\n      }\n    )\n  }\n\n  const handleAddressInput = (evt) => {\n    setError(false)\n    setAddress(evt.target.value)\n  }\n\n  return (\n    <Paper elevation={3} className=\"form\">\n      <form onSubmit={handleSubmit}>\n        <TextField \n          fullWidth \n          label=\"Search for address\" \n          variant=\"outlined\" \n          value={address}\n          onChange={handleAddressInput}\n          error={!!error}\n        />\n      </form>\n      { error && <Alert severity=\"error\">{error}</Alert> }\n    </Paper>\n  )\n}\n\nexport default SearchForm","import { useState } from 'react'\nimport DirectionsCarIcon from '@material-ui/icons/DirectionsCar'\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk'\nimport { Paper } from '@material-ui/core'\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab/'\n\nconst TravelModeSelect = (props) => {\n  const [travelMode, setTravelMode] = useState('car')\n\n  const handleChange = (evt, value) => {\n    setTravelMode(value)\n    props.onChange(value)\n  }\n\n  return (\n    <Paper elevation={3} className=\"travel-mode-select\">\n      <ToggleButtonGroup\n        value={travelMode}\n        exclusive\n        onChange={handleChange}\n      >\n        <ToggleButton value=\"car\" >\n          <DirectionsCarIcon />\n        </ToggleButton>\n        <ToggleButton value=\"pedestrian\" >\n          <DirectionsWalkIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Paper>\n  )\n}\n\nexport default TravelModeSelect","import React, { useRef, useLayoutEffect, useState, useEffect } from 'react'\nimport H from \"@here/maps-api-for-javascript\"\n\nconst Map = (props) => {\n  const mapRef = useRef(null)\n  const [map, setMap] = useState(null)\n  const [platform, setPlatform] = useState(null)\n\n  useLayoutEffect(() => {\n    if (!mapRef.current) return;\n\n    const hPlatform = new H.service.Platform({\n      'apikey': 'mPpQR16YV3tZ3YpokLwD4hFCEpwCKJWXe9Q-wv4EXIU'\n    })\n\n    setPlatform(hPlatform)\n\n    const defaultLayers = hPlatform.createDefaultLayers()\n\n    const hMap = new H.Map(\n      mapRef.current,\n      defaultLayers.vector.normal.map,\n      {\n        pixelRatio: window.devicePixelRatio,\n        center: props.center,\n        zoom: props.zoom\n      }\n    )\n\n    const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(hMap))\n    // const ui = H.ui.UI.createDefault(hMap, defaultLayers, 'de-DE')\n\n    setMap(hMap)\n\n    return () => hMap.dispose()\n  }, [mapRef])\n\n  useEffect(() => {\n    if (!map) return\n\n    const onResize = (evt) => {\n      map.getViewPort().resize()\n    }\n\n    const onTap = (evt) => {\n      const coords = map.screenToGeo(\n        evt.currentPointer.viewportX,\n        evt.currentPointer.viewportY\n      )\n      props.onClick(coords)\n    }\n\n    window.addEventListener('resize', onResize)\n    map.addEventListener('tap', onTap)\n\n    return () => {\n      window.removeEventListener('resize', onResize)\n      map.removeEventListener('tap', onTap)\n    }\n  }, [map])\n\n  useEffect(() => {\n    if (!map) return\n    map.setCenter(props.center)\n    if (props.zoomBounds) {\n      map.getViewModel().setLookAtData({ bounds: props.zoomBounds })\n    } else {\n      map.setZoom(props.zoom)\n    }\n  }, [props.center, props.zoom, props.zoomBounds])\n\n\n  const renderChildren = () => {\n    const { children } = props\n    if (!children) return\n\n    return React.Children.map(children, c => {\n      if (!c) return\n      return React.cloneElement(c, { map, platform })\n    })\n  }\n\n  return (\n    <>\n      <div className=\"map\" ref={mapRef} />\n      { map ? renderChildren() : \"Loading…\"}\n    </>\n  )\n\n}\n\nexport default Map","import { useEffect } from \"react\"\nimport H from \"@here/maps-api-for-javascript\"\n\nconst Marker = (props) => {\n\n  useEffect(() => {\n    const marker = new H.map.Marker(props.coords)\n    props.map.addObject(marker)\n\n    return () => props.map.removeObject(marker)\n\n  }, [props.coords])\n\n  return null\n}\n\nexport default Marker","import { useEffect } from \"react\"\nimport H from \"@here/maps-api-for-javascript\"\n\nconst Circle = (props) => {\n\n  // red: #FF443F 250,68,63\n  // green: #FF443F 5,200,36\n  // blue: #00BEEC 0,190,236\n\n  const style = {\n    fillColor: 'rgba(255, 255, 255, 0)',\n    strokeColor: '#FF443F', \n    lineDash: [3, 3],\n    lineWidth: 3\n  }\n\n  useEffect(() => {\n    const circle = new H.map.Circle(props.coords, props.radius, { style })\n    props.map.addObject(circle)\n    props.onBoundsChange(circle.getBoundingBox())\n\n    return () => props.map.removeObject(circle)\n\n  }, [props.coords, props.radius])\n\n  return null\n}\n\nexport default Circle","import { useEffect, useState } from \"react\"\nimport H from \"@here/maps-api-for-javascript\"\n\nconst objToParams = (obj) => {\n  let str = \"\";\n  for (let key in obj) {\n    if (str != \"\") str += \"&\";\n    str += key + \"=\" + encodeURIComponent(obj[key])\n  }\n  return str\n}\n\nconst Isoline = (props) => {\n  const [polyline, setPolyline] = useState(null)\n\n  const style = {\n    lineWidth: 0\n  }\n\n  useEffect(() => {\n    const router = props.platform.getRoutingService(null, 8)\n    const params = {\n      start: `geo!${props.coords.lat},${props.coords.lng}`,\n      range: props.range,\n      rangetype: props.rangeType || 'distance',\n      mode: `shortest;${props.travelMode}`\n    }\n\n    const apiPath = \"https://isoline.route.ls.hereapi.com/routing/7.2/calculateisoline.json?\"\n    fetch(apiPath + objToParams({ ...params, apikey: props.platform.a}))\n      .then(response => response.json())\n      .then(({ response }) => {\n        const latLngArray = response.isoline[0].component[0].shape\n          .map(e => e.split(',')).flat().map((e => +e))\n        setPolyline(H.geo.LineString.fromLatLngArray(latLngArray))\n      })\n\n\n  }, [props.coords, props.range, props.travelMode])\n\n  useEffect(() => {\n    if (!polyline) return\n    const polygon = new H.map.Polygon(polyline, props.radius, { style })\n    props.map.addObject(polygon)\n\n    return () => props.map.removeObject(polygon)\n  }, [polyline])\n\n  return null\n}\n\nexport default Isoline","import { useEffect, useState } from 'react'\n\nconst ENDPOINT = 'https://services7.arcgis.com/mOBPykOjAyBO2ZKk/arcgis/rest/services/RKI_Landkreisdaten/FeatureServer/0/query?where=1%3D1&outFields=GEN,cases_per_population,county,last_update,cases7_per_100k,cases_per_100k&returnGeometry=false&outSR=4326&f=json'\n\n\n\nconst prepData = ({ features }) => {\n  const calcStatus = (count) => {\n    if (count > 200) return 'hotSpot'\n    if (count > 50) return 'riskArea'\n    return 'ok'\n  }\n\n  const entries = features.map(({ attributes }) => {\n    return [attributes.GEN, { \n      name: attributes.GEN,\n      count: attributes.cases7_per_100k, \n      status: calcStatus(attributes.cases7_per_100k),\n      updatedAt: attributes.last_update\n    }]\n  })\n\n  return Object.fromEntries(entries)\n}\n\nconst CountyInfo = (props) => {\n  const [data, setData] = useState(null)\n  const [countyInfo, setCountyInfo] = useState(null)\n\n  useEffect(() => {\n    fetch(ENDPOINT)\n      .then(response => response.json())\n      .then((rawData) => {\n        setData(prepData(rawData))\n      })\n  }, [])\n\n  useEffect(() => {\n    if (data && data[props.county]) setCountyInfo(data[props.county])\n  }, [props.county])\n\n  return (\n    <>\n      { countyInfo && <div>{countyInfo.name}: {countyInfo.status} ({countyInfo.count})</div>}\n    </>\n  )\n\n}\n\nexport default CountyInfo","import { useState, useEffect } from 'react'\n\nimport SearchForm from './components/SearchForm'\nimport TravelModeSelect from './components/TravelModeSelect'\nimport Map from './components/Map'\nimport Marker from './components/Marker'\nimport Circle from './components/Circle'\nimport Isoline from './components/Isoline'\nimport CountyInfo from './components/CountyInfo'\n\n\nconst DEFAULT_COORDS = { lat: 51.354050638053394, lng: 10.688718943513482 } // Germany\nconst RANGE = 15 * 1000 // 15km\n\nconst coordsToHERECoords = (coords) => {\n  return { lat: coords.latitude, lng: coords.longitude }\n}\n\nconst App = (props) => {\n  const [coords, setCoords] = useState(DEFAULT_COORDS)\n  const [county, setCounty] = useState(null)\n  // const [location, setLocation] = useState({ \n  //   coords: null, incidenceValue: null, county: null, countyStatus: null \n  // })\n  const [travelMode, setTravelMode] = useState('car')\n  const [zoomBounds, setZoomBounds] = useState()\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n\n        setCoords(coordsToHERECoords(position.coords))\n      }, () => {})\n    }\n  }, [])\n\n  const coordsSet = () => !Object.is(coords, DEFAULT_COORDS)\n\n  const handleSearchResult = ({ coords, county }) => {\n    setCoords(coords)\n    setCounty(county)\n  }\n\n  return (\n    <div className=\"App\">\n      <Map center={coords} \n           zoom={coordsSet() ? 12 : 8} \n           zoomBounds={zoomBounds} \n           onClick={() => {}}\n           >\n        { coordsSet() && <Marker coords={coords} /> }\n        { coordsSet() && <Circle coords={coords} \n                                 radius={RANGE} \n                                 onBoundsChange={setZoomBounds} /> }\n        { coordsSet() && <Isoline coords={coords} \n                                  range={RANGE} \n                                  travelMode={travelMode} /> }\n        <SearchForm onResult={handleSearchResult} />\n        <TravelModeSelect onChange={setTravelMode} />\n      </Map>\n      <CountyInfo county={county} onResult={() => {}} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}